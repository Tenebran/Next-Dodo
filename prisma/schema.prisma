generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id               Int               @id @default(autoincrement())
    fullName         String
    email            String            @unique
    password         String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    cart             Cart?
    order            Order[]
    verificationCode VerificationCode?
    role             UserRole          @default(USER)
    cartId           Int
    provider         String
    providerId       String
}

model Categoty {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]
}

model Product {
    id           Int           @id @default(autoincrement())
    name         String
    imageUrl     String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    // Finds a category in Category using categoryId to compare id with the id in the category
    // The id in the category is exactly the same as the id in categoryId, and references: [id] 
    // specifies what we extract from categoryId (one to many)
    categoty     Categoty?     @relation(fields: [categotyId], references: [id])
    // (many to many)
    ingredient   Ingredient?   @relation(fields: [ingredientId], references: [id])
    categotyId   Int?
    ingredientId Int
    items        ProductItem[]
}

model Ingredient {
    id         Int        @id @default(autoincrement())
    name       String
    price      Int
    imageUrl   String
    products   Product[]
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    cartItem   CartItem[]
    cartItemId Int?
}

model ProductItem {
    id        Int        @id @default(autoincrement())
    price     Int
    size      Int?
    pizzaType Int?
    productId Int
    product   Product    @relation(fields: [productId], references: [id])
    cartItem  CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Cart {
    id          Int        @id @default(autoincrement())
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    totalAmount Int        @default(0)
    token       String?
    items       CartItem[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model CartItem {
    id            Int          @id @default(autoincrement())
    productItem   ProductItem  @relation(fields: [productItemId], references: [id])
    productItemId Int
    cart          Cart         @relation(fields: [cartId], references: [id])
    cartId        Int
    quantity      Int
    ingredients   Ingredient[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Order {
    id         Int         @id @default(autoincrement())
    user       User?       @relation(fields: [userId], references: [id])
    userId     Int?
    token      String
    totalAmout Int
    status     OrderStatus
    paymentId  String?
    items      Json
    fullname   String
    address    String
    email      String
    phone      String
    comment    String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

model VerificationCode {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    code      String
    createdAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
